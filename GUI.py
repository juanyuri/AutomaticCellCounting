# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'firstUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import MainWindow
import sys
from Display import Ui_Form
import cv2
import contourGUI

class CFUCounter(QtWidgets.QMainWindow, MainWindow.Ui_MainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.setWindowTitle('CFUCounter')
        
        #signals
        self.openButton.clicked.connect(self.open_file)
        self.graphicsView.mousePressEvent=self.get_pos
        self.startButton.clicked.connect(self.startUp)
        self.saveButton.clicked.connect(self.saveFile)
        
    def open_file(self):
        self.fname=QtWidgets.QFileDialog.getOpenFileName(self,"Open File","","All Files (*)")
        print(self.fname)
        if self.fname:
            self.cvImg=cv2.imread(self.fname[0])
            self.pixmap=QtGui.QPixmap(self.fname[0])
# =============================================================================
#             self.image.setPixmap(self.pixmap)
# =============================================================================
            
            item=QtWidgets.QGraphicsPixmapItem(self.pixmap)
            self.scene=QtWidgets.QGraphicsScene(self)
            self.scene.addItem(item)
            self.graphicsView.setScene(self.scene)
            
            
    def get_pos(self,event):
        x=event.pos().x()
        y=event.pos().y()
        print(x,y)
        
    def startUp(self):
        if hasattr(self,'fname'):
            instructions=QtWidgets.QMessageBox(QtWidgets.QMessageBox.Information, 'Instructions', 'Click on one or more well-defined colonies \nPress "q" when complete \nPress "r" to start over.')
            instructions.exec_()
            self.counted,self.clusterSize=contourGUI.big(self.fname[0])
            self.countedRGB=cv2.cvtColor(self.counted,cv2.COLOR_BGR2RGB)
            self.cv2toqimg(self.countedRGB)
            final=QtGui.QPixmap.fromImage(self.final)
            item=QtWidgets.QGraphicsPixmapItem(final)
            self.scene=QtWidgets.QGraphicsScene(self)
            self.scene.addItem(item)
            self.graphicsView.setScene(self.scene)
            
            #set label containing count
            label='Total count: '+str(sum(self.clusterSize))
            if len(self.clusterSize)==1:
                self.countLabel.setText(label)
            else:
                for count,i in enumerate(self.clusterSize):
                    label=label+'   Cluster' + str(count)+': '+str(i)
                self.countLabel.setText(label)

        else:
            message=QtWidgets.QMessageBox.warning(self, 'Warning', 'Please select a file')
            message.exec_()
        
    def saveFile(self):
        options = QtWidgets.QFileDialog.Options()
        options |= QtWidgets.QFileDialog.DontUseNativeDialog
        fileName, _ = QtWidgets.QFileDialog.getSaveFileName(self,"QFileDialog.getSaveFileName()","","All Files (*);;Text Files (*.txt)",options=options)
        if fileName:
            print(fileName)
            cv2.imwrite(fileName,self.counted)
        
            
            
    
    ##helper functions 
    def cv2toqimg(self,cv2img):
        height, width, channel = cv2img.shape
        bytesPerLine = 3 * width
        self.final = QtGui.QImage(cv2img.data, width, height, bytesPerLine, QtGui.QImage.Format_RGB888)
        
    

class secondWindow(QtWidgets.QWidget,Ui_Form):
    def __init__(self,fname):
        super().__init__()
        self.setupUi(self)
        self.setWindowTitle('CFUCounter')
        
        #setting attributes
        self.fname=fname
        self.cvImg=cv2.imread(fname)
        self.pixmap=QtGui.QPixmap(fname)
        #creates Qgraphicspixmapitem from pixmap image
        item=QtWidgets.QGraphicsPixmapItem(self.pixmap)
        
        #creates qgraphicsscene and adds Qgraphicspixmapitem
        self.scene=QtWidgets.QGraphicsScene()
        self.scene.addItem(item)
        
        #sets scene of graphicsview
        self.img.setScene(self.scene)
        self.show()
        
        
        #signals
        self.img.mousePressEvent=self.singleColony
        

        
        
    
        
        
if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    form=CFUCounter()
    form.show()
    sys.exit(app.exec_())
